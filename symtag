#!/bin/bash

# This program is free software. It comes without any warranty, to the extent
# permitted by applicable law. You can redistribute it and/or modify it under
# the terms of the Do What The Fuck You Want To Public License, Version 2, as
# published by Sam Hocevar. See WTFPL.txt or http://www.wtfpl.net/ for more
# details.

shopt -s expand_aliases
alias fail='{ echo "Error:  line ${LINENO}"; exit 1; }'
alias unpath="sed 's#^.*/##g'"


function main {
  mkdir -p "${SYMTAGDIR}/"{hash_by_tag,hash_by_name,path_by_hash,tag_by_hash,name_by_hash} || fail

  add_files
  add_tags
  fulfill_query
  dump_files
  output_names
  output_tags
}


function add_files {
  for FILE in "${FILES_TO_TAG[@]}"; do 
    NAME=$(echo "${FILE}" | unpath)
    if test '' == "${NAME}"; then fail; fi

    HASH=''
    if test -e "${SYMTAGDIR}/hash_by_name/${NAME}"; then
      HASH="$(readlink "${SYMTAGDIR}/hash_by_name/${NAME}" | unpath)"
    fi
    if ! is_hash "${HASH}"; then
      HASH="$(sha256sum "${FILE}" | {
        read HASH PATH
        echo $HASH
      })" || fail
    fi
    if ! is_hash "${HASH}"; then fail; fi

    NAMES_TO_TAG+=("${NAME}")
    HASHES_TO_TAG+=("${HASH}")

    link_hash_to_file
    link_name_to_hash
  done
}


function add_tags {
  for HASH in "${HASHES_TO_TAG[@]}"; do
    for TAG in "${TAGS[@]}"; do
      link_tag_to_hash
    done
  done
}


function link_hash_to_file {
  if 
    test '' == "${HASH}" \
    -o   '' == "${FILE}"
  then fail
  fi

  if test -e "${SYMTAGDIR}/path_by_hash/${HASH}"; then
    rm -rf "${SYMTAGDIR}/path_by_hash/${HASH}" || fail
  fi
  FILE_REL_PATH="$(realpath -s --relative-to "${SYMTAGDIR}/path_by_hash/" "${FILE}")" || fail
  ln -s "${FILE_REL_PATH}" "${SYMTAGDIR}/path_by_hash/${HASH}" || fail
}


function link_name_to_hash {
  if 
    test '' == "${HASH}" \
    -o   '' == "${NAME}"
  then fail
  fi

  PATH_BY_NAME="$(readlink -m "${SYMTAGDIR}/hash_by_name/${NAME}")" || fail
  PATH_BY_HASH="$(readlink -m "${SYMTAGDIR}/path_by_hash/${HASH}")" || fail

  if test -e "${PATH_BY_NAME}"; then
    rm -rf "${SYMTAGDIR}/hash_by_name/${NAME}" || fail
  fi

  if test -e "${SYMTAGDIR}/hash_by_name/${NAME}"; then
    rm -rf "${SYMTAGDIR}/hash_by_name/${NAME}" || fail
  fi
  ln -s "../path_by_hash/${HASH}" "${SYMTAGDIR}/hash_by_name/${NAME}" || fail

  if test -e "${SYMTAGDIR}/name_by_hash/${HASH}"; then
    rm -rf "${SYMTAGDIR}/name_by_hash/${HASH}" || fail
  fi
  ln -s "../hash_by_name/${NAME}" "${SYMTAGDIR}/name_by_hash/${HASH}" || fail
}


function link_tag_to_hash {
  if 
    test '' == "${HASH}" \
    -o   '' == "${TAG}"
  then fail
  fi

  mkdir -p "${SYMTAGDIR}/hash_by_tag/${TAG}" || fail
  if test -e "${SYMTAGDIR}/hash_by_tag/${TAG}/${HASH}"; then
    rm -rf "${SYMTAGDIR}/hash_by_tag/${TAG}/${HASH}" || fail
  fi
  ln -s "../../path_by_hash/${HASH}" "${SYMTAGDIR}/hash_by_tag/${TAG}/${HASH}" || fail

  mkdir -p "${SYMTAGDIR}/tag_by_hash/${HASH}" || fail
  if test -e "${SYMTAGDIR}/tag_by_hash/${HASH}/${TAG}"; then
    rm -rf "${SYMTAGDIR}/tag_by_hash/${HASH}/${TAG}" || fail
  fi
  ln -s "../../hash_by_tag/${TAG}" "${SYMTAGDIR}/tag_by_hash/${HASH}/${TAG}" || fail
}


function boolean_or {
  HASHES_BY_QUERY+=("${HASHES_BY_TAG[@]}")
}


function boolean_and {
  NEW_HASHES_BY_QUERY=()
  for HASH_BY_QUERY in "${HASHES_BY_QUERY[@]}"; do
    for HASH_BY_TAG in "${HASHES_BY_TAG[@]}"; do
      if test "${HASH_BY_QUERY}" == "${HASH_BY_TAG}"; then
        NEW_HASHES_BY_QUERY+=("${HASH_BY_QUERY}")
      fi
    done
  done
  HASHES_BY_QUERY=( "${NEW_HASHES_BY_QUERY[@]}" )
}


function boolean_not {
  NEW_HASHES_BY_QUERY=()
  for HASH_BY_QUERY in "${HASHES_BY_QUERY[@]}"; do
    MATCH=no
    for HASH_BY_TAG in "${HASHES_BY_TAG[@]}"; do
      if test "${HASH_BY_QUERY}" == "${HASH_BY_TAG}"; then
        MATCH=yes
      fi
    done
    if test "${MATCH}" == no; then
      NEW_HASHES_BY_QUERY+=( "${HASH_BY_QUERY}" )
    fi
  done
  HASHES_BY_QUERY=( "${NEW_HASHES_BY_QUERY[@]}" )
}


function output_names {
  NULLGLOB=$(shopt nullglob | { read x y && echo $y; }) || fail
  shopt -s nullglob || fail
  PATHS_TO_ALL_NAMES=( "${SYMTAGDIR}/hash_by_name/"* )
  if test 'off' == "${NULLGLOB}"; then
    shopt -u nullglob || fail
  fi

  i=0
  while test "${i}" -lt "${#PATHS_TO_ALL_NAMES[@]}"; do
    ALL_NAMES["${i}"]="$( echo "${PATHS_TO_ALL_NAMES[$i]}" | unpath )"
    i=$(( $i + 1 ))
  done

  for HASH_BY_QUERY in "${HASHES_BY_QUERY[@]}"; do
    case "${OUTPUT}" in
      hash)
        echo "${HASH_BY_QUERY}"
        ;;
      file)
        readlink -m "${SYMTAGDIR}/path_by_hash/${HASH_BY_QUERY}" || fail
        ;;
      name)
        PATH_TO_FILE="$(readlink "${SYMTAGDIR}/name_by_hash/${HASH_BY_QUERY}")" || fail
        echo "${PATH_TO_FILE}" | unpath
        ;;
      *)
        echo -n "${HASH_BY_QUERY}:  "
        readlink "${SYMTAGDIR}/path_by_hash/${HASH_BY_QUERY}"
    esac
  done
}


function output_tags {
  for TAG in "${FILE_TAGS[@]}"; do
    echo "${TAG}"
  done
}


function fulfill_query {
  MODE=OR
  HASHES_BY_QUERY=()
  for ELEMENT in $QUERY; do
    case "${ELEMENT}" in
      AND|OR|NOT)
        MODE="${ELEMENT}"
        continue
        ;;
      *)
        HASHES_BY_TAG=( $(test -d "${SYMTAGDIR}/hash_by_tag/${ELEMENT}/" && ls "${SYMTAGDIR}/hash_by_tag/${ELEMENT}/") )
        case "${MODE}" in
          OR)
            boolean_or
            ;;
          AND)
            boolean_and
            ;;
          NOT)
            boolean_not
            ;;
          *)
            fail
            ;;
        esac
        ;;
    esac
  done
}


function dump_files {
  FILE_TAGS=()
  for FILE in "${FILES_TO_DUMP[@]}"; do
    NAME="$(echo "${FILE}" | unpath)" || fail
    PATH_TO_HASH="$(readlink "${SYMTAGDIR}/hash_by_name/${NAME}")" || continue
    HASH="$(echo "${PATH_TO_HASH}" | unpath)"

    NULLGLOB=$(shopt nullglob | { read x y && echo $y; }) || fail
    shopt -s nullglob || fail
    PATHS_TO_TAGS_BY_HASH=( "${SYMTAGDIR}/tag_by_hash/${HASH}/"* )
    if test 'off' == "${NULLGLOB}"; then
      shopt -u nullglob || fail
    fi

    for TAG_PATH in "${PATHS_TO_TAGS_BY_HASH[@]}"; do
      FILE_TAGS+=("$(echo "${TAG_PATH}" | unpath)")
    done
  done
}


function is_hash {
  echo "${1}" \
    | grep -qE '^[0-9a-z]{64,64}$'
}


function usage {
  cat << EOF
symtag  
  [-c <config>] 
  [file] 
  [-t <tag>] 
  [-q <tag> [AND|OR|NOT <tag> ...]] 
  [-o file|link|name] 
  [-f <file>]

\$SYMTAGDIR/
  path_by_hash
  name_by_hash
  tag_by_hash
  hash_by_name
  hash_by_tag

Directory naming conventions:
  
  path:         path of file
  name:         last element of path
  tag:          descriptor of file
  hash:         sha256sum of file


symtag -h

  "Output the help text."

symtag -c path ...

  "Instead of ~/.symtagrc, use this configuration file."

symtag path ...

  "Act on the file at this path.  If it is not known, index it.  Give it the
  file name element of this path as its name."

symtag path -t tag -t tag

  "Associate the file with these tags."

symtag -q this

  "What files are associated with this tag?"

symtag -q 'this NOT that'

  "Remove from that set files associated with that tag."

symtag -q 'this NOT that AND another'

  "Remove from that set files not associated with another tag."

symtag -q 'this NOT that AND another OR additional'

  "Add to that set files associated with an additional tag."

symtag -q 'this NOT that AND another OR additional' -o file

  "Answer my query with the path of each matching file."

symtag -f file

  "What tags does this file have?"


tag <path>

  Prompt for space separated tags to describe the file at path.


review
  
  Open each known file, as instructed by mailcap, in random order, and
  simultaneously continuously prompt for space separated tags in another window.


tests

  Execute each line of api_tests as a test, and report pass/fail tallies.
EOF
}


SYMTAGRC=~/.symtagrc
SYMTAGDIR=~/.symtag
OUTPUT=default

FILES_TO_TAG=()
NAMES_TO_TAG=()
HASHES_TO_TAG=()
TAGS=()
FILES_TO_DUMP=()

while test $# -gt 0; do
  case "${1}" in
    -c|--config|--rc)
      SYMTAGRC="${2}"
      shift
      ;;
    -t|--tag)
      TAGS+=("${2}")
      shift
      ;;
    -q|--query)
      QUERY="${2}"
      shift
      ;;
    -o|--output)
      O_OUTPUT="${2}"
      shift
      ;;
    -f|--file)
      FILES_TO_DUMP+=("${2}")
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -*)
      fail
      ;;
    *)
      if test -e "${1}"; then
        FILES_TO_TAG+=("${1}")
      fi
      ;;
  esac
  shift
done

if test -f "${SYMTAGRC}"; then
  . "${SYMTAGRC}" || fail
fi

if ! test '' == "${O_OUTPUT}"; then
  OUTPUT="${O_OUTPUT}"
fi

main
